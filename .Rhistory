par(mfrow = c(2, 2))
plot(residuals(fit_arima), main = "Residuals")
qqnorm(residuals(fit_arima)); qqline(residuals(fit_arima), col = "red")
acf(residuals(fit_arima), main = "ACF of Residuals")
pacf(residuals(fit_arima), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit_arima), lag = 20, type = "Ljung-Box")
# Dự báo 30 ngày
forecast_arima <- forecast(fit_arima, h = 30, level = c(80, 95))
plot(forecast_arima, main = "ARIMA Forecast for Log Close Price")
summary(forecast_arima)
# Dự báo 30 ngày
forecast_arima <- forecast(fit_arima, h = 30, level = c(80, 95))
plot(forecast_arima, main = "ARIMA Forecast for Log Close Price")
summary(forecast_arima)
res_squared <- residuals^2
par(mfrow = c(1, 2))
acf(res_squared, main = "ACF of Squared Residuals")
pacf(res_squared, main = "PACF of Squared Residuals")
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
plot(fit_garch, which = "all")
# Kiểm tra phần dư mô hình
resid_garch <- residuals(fit_garch, standardize = TRUE)
Box.test(resid_garch^2, lag = 20, type = "Ljung-Box")  # nên > 0.05 để không còn ARCH effect
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
plot(fit_garch, which = "all")
# Kiểm tra phần dư mô hình
resid_garch <- residuals(fit_garch, standardize = TRUE)
Box.test(resid_garch^2, lag = 20, type = "Ljung-Box")  # nên > 0.05 để không còn ARCH effect
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
res_squared <- residuals^2
par(mfrow = c(1, 2))
acf(res_squared, main = "ACF of Squared Residuals")
pacf(res_squared, main = "PACF of Squared Residuals")
df <- read.csv("META.csv")
# Kiểm tra dữ liệu thiếu
if (anyNA(df$Close)) stop("Dữ liệu chứa giá trị NA")
if (any(df$Close <= 0)) stop("Dữ liệu chứa giá trị không hợp lệ")
# Chuyển đổi Date thành định dạng thời gian
df$Date <- as.Date(df$Date, format = "%Y-%m-%d")
# Vẽ biểu đồ giá đóng cửa
plot(df$Date, df$Close, type = "l", col = "blue",
main = "META Stock Price Over Time",
xlab = "Date", ylab = "Close Price (USD)")
# Tạo chuỗi log
df$LogClose <- log(df$Close)
# Vẽ chuỗi log
plot(df$Date, df$LogClose, type = "l", col = "blue",
main = "Log of META Close Price", xlab = "Date", ylab = "Log Close Price")
# Kiểm tra tính dừng của chuỗi gốc
adf_test_close <- adf.test(df$Close)
library(tseries)
# Sai phân bậc 1 trên chuỗi log
df$LogClose_diff <- c(NA, diff(df$LogClose))
LogClose_diff_clean <- na.omit(df$LogClose_diff)
# Kiểm tra tính dừng của chuỗi sai phân
adf_test_diff <- adf.test(LogClose_diff_clean)
print(adf_test_diff)
# Vẽ chuỗi sau sai phân
plot(df$Date[-1], LogClose_diff_clean, type = "l", col = "blue",
main = "Differenced Log Close Price",
xlab = "Date", ylab = "Diff Log Close")
# Vẽ ACF và PACF của chuỗi sai phân
par(mfrow = c(1, 2))
acf(LogClose_diff_clean, main = "ACF of Differenced Log Close", lag.max = 50)
pacf(LogClose_diff_clean, main = "PACF of Differenced Log Close", lag.max = 50)
# Tạo chuỗi log
df$LogClose <- log(df$Close)
# Vẽ chuỗi log
plot(df$Date, df$LogClose, type = "l", col = "blue",
main = "Log of META Close Price", xlab = "Date", ylab = "Log Close Price")
# Kiểm tra tính dừng của chuỗi gốc
adf_test_close <- adf.test(df$Close)
print(adf_test_close)
# Kiểm tra tính dừng của chuỗi log
adf_test_log <- adf.test(df$LogClose)
print(adf_test_log)
# Vẽ ACF và PACF của chuỗi log
par(mfrow = c(1, 2))
acf(df$LogClose, main = "ACF of Log Close", lag.max = 50)
pacf(df$LogClose, main = "PACF of Log Close", lag.max = 50)
library(tseries)
# Sai phân bậc 1 trên chuỗi log
df$LogClose_diff <- c(NA, diff(df$LogClose))
LogClose_diff_clean <- na.omit(df$LogClose_diff)
# Kiểm tra tính dừng của chuỗi sai phân
adf_test_diff <- adf.test(LogClose_diff_clean)
print(adf_test_diff)
# Vẽ chuỗi sau sai phân
plot(df$Date[-1], LogClose_diff_clean, type = "l", col = "blue",
main = "Differenced Log Close Price",
xlab = "Date", ylab = "Diff Log Close")
# Vẽ ACF và PACF của chuỗi sai phân
par(mfrow = c(1, 2))
acf(LogClose_diff_clean, main = "ACF of Differenced Log Close", lag.max = 50)
pacf(LogClose_diff_clean, main = "PACF of Differenced Log Close", lag.max = 50)
# Sử dụng eacf để đề xuất mô hình
eacf(LogClose_diff_clean)
library(tseries)
# Sử dụng eacf để đề xuất mô hình
eacf(LogClose_diff_clean)
library(forecast)
# Sử dụng eacf để đề xuất mô hình
eacf(LogClose_diff_clean)
library(TSA)
# Sai phân bậc 1 trên chuỗi log
df$LogClose_diff <- c(NA, diff(df$LogClose))
LogClose_diff_clean <- na.omit(df$LogClose_diff)
# Kiểm tra tính dừng của chuỗi sai phân
adf_test_diff <- adf.test(LogClose_diff_clean)
print(adf_test_diff)
# Vẽ chuỗi sau sai phân
plot(df$Date[-1], LogClose_diff_clean, type = "l", col = "blue",
main = "Differenced Log Close Price",
xlab = "Date", ylab = "Diff Log Close")
# Vẽ ACF và PACF của chuỗi sai phân
par(mfrow = c(1, 2))
acf(LogClose_diff_clean, main = "ACF of Differenced Log Close", lag.max = 50)
pacf(LogClose_diff_clean, main = "PACF of Differenced Log Close", lag.max = 50)
library(forecast)
# Sử dụng eacf để đề xuất mô hình
eacf(LogClose_diff_clean)
# Huấn luyện mô hình ARIMA trên chuỗi sai phân
fit_arima <- auto.arima(df$LogClose, seasonal = FALSE, stepwise = TRUE, trace = TRUE)
summary(fit_arima)
# Kiểm tra phần dư
checkresiduals(fit_arima)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit_arima), main = "Residuals")
qqnorm(residuals(fit_arima)); qqline(residuals(fit_arima), col = "red")
acf(residuals(fit_arima), main = "ACF of Residuals")
pacf(residuals(fit_arima), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit_arima), lag = 20, type = "Ljung-Box")
library(TSA)
# Sai phân bậc 1 trên chuỗi log
df$LogClose_diff <- c(NA, diff(df$LogClose))
LogClose_diff_clean <- na.omit(df$LogClose_diff)
# Kiểm tra tính dừng của chuỗi sai phân
adf_test_diff <- adf.test(LogClose_diff_clean)
print(adf_test_diff)
# Vẽ chuỗi sau sai phân
plot(df$Date[-1], LogClose_diff_clean, type = "l", col = "blue",
main = "Differenced Log Close Price",
xlab = "Date", ylab = "Diff Log Close")
# Vẽ ACF và PACF của chuỗi sai phân
par(mfrow = c(1, 2))
acf(LogClose_diff_clean, main = "ACF of Differenced Log Close", lag.max = 50)
pacf(LogClose_diff_clean, main = "PACF of Differenced Log Close", lag.max = 50)
library(forecast)
# Sử dụng eacf để đề xuất mô hình
eacf(LogClose_diff_clean)
# Huấn luyện mô hình ARIMA trên chuỗi sai phân
fit_arima <- auto.arima(df$LogClose, seasonal = FALSE, stepwise = TRUE, trace = TRUE)
summary(fit_arima)
# Kiểm tra phần dư
checkresiduals(fit_arima)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit_arima), main = "Residuals")
qqnorm(residuals(fit_arima)); qqline(residuals(fit_arima), col = "red")
acf(residuals(fit_arima), main = "ACF of Residuals")
pacf(residuals(fit_arima), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit_arima), lag = 20, type = "Ljung-Box")
# Dự báo 30 ngày
forecast_arima <- forecast(fit_arima, h = 30, level = c(80, 95))
plot(forecast_arima, main = "ARIMA Forecast for Log Close Price")
summary(forecast_arima)
res_squared <- residuals^2
par(mfrow = c(1, 2))
acf(res_squared, main = "ACF of Squared Residuals")
pacf(res_squared, main = "PACF of Squared Residuals")
library(rugarch)
log_returns <- na.omit(df$LogClose_diff)
# Cấu hình mô hình GARCH(1,1) với phân phối chuẩn
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "norm"
)
# Huấn luyện mô hình
fit_garch <- ugarchfit(spec = spec_garch, data = log_returns)
# Kết quả mô hình
show(fit_garch)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 200)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 10)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 10000)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
n_forecast <- 20
forecast_garch <- ugarchforecast(fit_garch, n.ahead = n_forecast)
# Lấy giá trị dự đoán và độ lệch chuẩn
forecast_mean <- forecast_garch@forecast$seriesFor
forecast_sigma <- forecast_garch@forecast$sigmaFor
# Tạo vector thời gian cho dự đoán
time_index <- seq(length(log_returns) + 1, length(log_returns) + n_forecast)
# Tính khoảng tin cậy 95%
upper <- forecast_mean + 1.96 * forecast_sigma
lower <- forecast_mean - 1.96 * forecast_sigma
# Vẽ biểu đồ bằng plot thông thường
# Vẽ chuỗi gốc
plot(log_returns, type = "l", col = "blue",
xlab = "Thời gian", ylab = "Log Returns",
main = "Dự đoán Log Returns với GARCH(1,1)",
xlim = c(1, length(log_returns) + n_forecast),
ylim = range(c(log_returns, upper, lower)))
# Thêm đường dự đoán
lines(time_index, forecast_mean, col = "red", lty = 2)
# Thêm khoảng tin cậy
lines(time_index, upper, col = "red", lty = 3)
lines(time_index, lower, col = "red", lty = 3)
# Thêm chú thích
legend("topleft", legend = c("Log Returns", "Dự đoán", "Khoảng tin cậy 95%"),
col = c("blue", "red", "red"), lty = c(1, 2, 3), cex = 0.8)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
forecast_garch <- ugarchforecast(fit_garch, n.ahead = 20)
plot(forecast_garch,which = 3)
# Doc du lieu
data <- read.csv("tourism.csv")
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# Tong hop du lieu theo ngay
data_agg <- aggregate(Tourist ~ Date, data, sum)
data_agg <- data_agg[order(data_agg$Date), ]
# Tao chuoi thoi gian
ts_data <- ts(data_agg$Tourist, start = 1998, frequency = 4)
# Ve bieu do chuoi thoi gian
plot(ts_data, main = "So luong khach du lich", xlab = "Nam", ylab = "Khach du lich")
# Phan ra chuoi thoi gian
decomp <- stl(ts_data, s.window = "periodic")
plot(decomp, main = "Phan ra chuoi thoi gian")
library(forecast)
ndiffs(ts_data)
nsdiffs(ts_data)
library(tseries)
# Kiem tra tinh dung
adf.test(ts_data)
# Sai phan
diff_ts <- diff(diff(ts_data, lag = 4))
adf.test(diff_ts)
# Ve ACF va PACF
par(mfrow = c(1, 2))
acf(diff_ts, main = "ACF sau sai phan")
pacf(diff_ts, main = "PACF sau sai phan")
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiem tra phan du
tsdiag(fit)
fc <- forecast(fit, h = 8)
# Ve bieu do du bao
plot(fc, main = "Du bao khach du lich", xlab = "Nam", ylab = "Khach du lich")
lines(fitted(fit), col = "red", lty = 2)
legend("topleft", legend = c("Du bao", "Gia tri mo hinh"), col = c("blue", "red"), lty = c(1, 2))
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
res_squared <- residuals^2
par(mfrow = c(1, 2))
acf(res_squared, main = "ACF of Squared Residuals")
pacf(res_squared, main = "PACF of Squared Residuals")
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
par(mfrow = c(1, 2))
acf(residuals^2, main = "ACF of Squared Residuals")
pacf(residuals^2, main = "PACF of Squared Residuals")
# Doc du lieu
data <- read.csv("tourism.csv")
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# Tong hop du lieu theo ngay
data_agg <- aggregate(Tourist ~ Date, data, sum)
data_agg <- data_agg[order(data_agg$Date), ]
# Tao chuoi thoi gian
ts_data <- ts(data_agg$Tourist, start = 1998, frequency = 4)
# Ve bieu do chuoi thoi gian
plot(ts_data, main = "So luong khach du lich", xlab = "Nam", ylab = "Khach du lich")
# Phan ra chuoi thoi gian
decomp <- stl(ts_data, s.window = "periodic")
plot(decomp, main = "Phan ra chuoi thoi gian")
library(forecast)
ndiffs(ts_data)
nsdiffs(ts_data)
library(tseries)
# Kiem tra tinh dung
adf.test(ts_data)
# Sai phan
diff_ts <- diff(diff(ts_data, lag = 4))
adf.test(diff_ts)
# Ve ACF va PACF
par(mfrow = c(1, 2))
acf(diff_ts, main = "ACF sau sai phan")
pacf(diff_ts, main = "PACF sau sai phan")
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiem tra phan du
tsdiag(fit)
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
par(mfrow = c(1, 2))
acf(residuals^2, main = "ACF of Squared Residuals")
pacf(residuals^2, main = "PACF of Squared Residuals")
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiem tra phan du
tsdiag(fit)
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
fc <- forecast(fit, h = 8)
# Ve bieu do du bao
plot(fc, main = "Du bao khach du lich", xlab = "Nam", ylab = "Khach du lich")
lines(fitted(fit), col = "red", lty = 2)
legend("topleft", legend = c("Du bao", "Gia tri mo hinh"), col = c("blue", "red"), lty = c(1, 2))
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiểm tra phần dư
checkresiduals(fit_arima)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit_arima), main = "Residuals")
qqnorm(residuals(fit_arima)); qqline(residuals(fit_arima), col = "red")
acf(residuals(fit_arima), main = "ACF of Residuals")
pacf(residuals(fit_arima), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit_arima), lag = 20, type = "Ljung-Box")
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiểm tra phần dư
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
# Doc du lieu
data <- read.csv("tourism.csv")
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# Tong hop du lieu theo ngay
data_agg <- aggregate(Tourist ~ Date, data, sum)
data_agg <- data_agg[order(data_agg$Date), ]
# Tao chuoi thoi gian
ts_data <- ts(data_agg$Tourist, start = 1998, frequency = 4)
# Ve bieu do chuoi thoi gian
plot(ts_data, main = "So luong khach du lich", xlab = "Nam", ylab = "Khach du lich")
# Phan ra chuoi thoi gian
decomp <- stl(ts_data, s.window = "periodic")
plot(decomp, main = "Phan ra chuoi thoi gian")
library(forecast)
ndiffs(ts_data)
nsdiffs(ts_data)
library(tseries)
# Kiem tra tinh dung
adf.test(ts_data)
# Sai phan
diff_ts <- diff(diff(ts_data, lag = 4))
adf.test(diff_ts)
# Ve ACF va PACF
par(mfrow = c(1, 2))
acf(diff_ts, main = "ACF sau sai phan")
pacf(diff_ts, main = "PACF sau sai phan")
# Xay dung mo hinh SARIMA
fit <- auto.arima(ts_data, seasonal = TRUE)
# Xem ket qua mo hinh
summary(fit)
# Kiểm tra phần dư
checkresiduals(fit)
# Vẽ diagnostics cho phần dư
par(mfrow = c(2, 2))
plot(residuals(fit), main = "Residuals")
qqnorm(residuals(fit)); qqline(residuals(fit), col = "red")
acf(residuals(fit), main = "ACF of Residuals")
pacf(residuals(fit), main = "PACF of Residuals")
# Ljung-Box test
Box.test(residuals(fit), lag = 20, type = "Ljung-Box")
fc <- forecast(fit, h = 8)
# Ve bieu do du bao
plot(fc, main = "Du bao khach du lich", xlab = "Nam", ylab = "Khach du lich")
lines(fitted(fit), col = "red", lty = 2)
legend("topleft", legend = c("Du bao", "Gia tri mo hinh"), col = c("blue", "red"), lty = c(1, 2))
